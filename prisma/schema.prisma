generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  password_hash String
  firstName     String?
  lastName      String?
  phoneNumber   String?
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  Cart          Cart[]
  Wishlist      Wishlist[]
  Orders        Order[]
  Reviews       Review[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Products    Product[]
}

model Product {
  id               Int       @id @default(autoincrement())
  name             String
  description      String?
  price            Float
  discountedPrice  Float?
  categoryId       Int
  category         Category  @relation(fields: [categoryId], references: [id])
  stockQuantity    Int       @default(0)
  sku              String    @unique
  imageUrl         String?
  additionalImages Json?
  isFeatured       Boolean   @default(false)
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Cart             Cart[]
  Wishlist         Wishlist[]
  OrderItems       OrderItem[]
  Reviews          Review[]
}

model Cart {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  addedAt   DateTime @default(now())

  @@unique([userId, productId])
}

model Wishlist {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  addedAt   DateTime @default(now())

  @@unique([userId, productId])
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  orderDate     DateTime    @default(now())
  totalAmount   Float
  status        OrderStatus @default(pending)
  paymentStatus PaymentStatus @default(pending)
  trackingNumber String?
  notes         String?
  OrderItems    OrderItem[]
  ShippingDetails ShippingDetail[]
  Payments      Payment[]
}

model OrderItem {
  id             Int     @id @default(autoincrement())
  orderId        Int
  order          Order    @relation(fields: [orderId], references: [id])
  productId      Int
  product        Product  @relation(fields: [productId], references: [id])
  quantity       Int
  unitPrice      Float
  discountAmount Float    @default(0)
}

model ShippingDetail {
  id                 Int     @id @default(autoincrement())
  orderId            Int
  order              Order    @relation(fields: [orderId], references: [id])
  firstName          String
  lastName           String
  email              String
  phoneNumber        String
  addressLine1       String
  addressLine2       String?
  city               String
  state              String
  country            String
  postalCode         String
  shippingMethod     String?
  trackingUrl        String?
  estimatedDelivery  DateTime?
  actualDelivery     DateTime?
}

model Payment {
  id                Int       @id @default(autoincrement())
  orderId           Int
  order             Order     @relation(fields: [orderId], references: [id])
  paymentMethod     String
  transactionId     String
  amount            Float
  currency          String    @default("INR")
  status            PaymentStatus
  paymentDate       DateTime  @default(now())
  razorpayOrderId   String?
  razorpayPaymentId String?
  razorpaySignature String?
}

model Review {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  rating      Int
  comment     String?
  reviewDate  DateTime @default(now())
  isApproved  Boolean  @default(false)
}

model Admin {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  password_hash String
  firstName     String?
  lastName      String?
  role          AdminRole @default(admin)
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum AdminRole {
  super_admin
  admin
  content_manager
  order_manager
}